1 ОПИС АРХІТЕКТУРИ СИСТЕМИ

Розробка серверної / back-end частини програмної системи для автоматизованого управління освітленням для вирощування рослин включає використання Spring Boot та Hibernate для пришвидшення процесу розробки. Для зберігання даних використовується система управління базами даних PostgreSQL Server, а для обміну пакетами між сервером та IoT пристроями використовується протокол MQTT. Мобільний додаток розробляється на мові програмування Kotlin, а front-end на базі React, що використовує JavaScript.

2 ПОБУДОВА ДІАГРАМИ РОЗГОРТАННЯ

Для розробки програмної системи були прийняті наступні рішення: використовувати PostgreSQL Server для зберігання даних, розробляти мобільний додаток на мові Kotlin використовуючи Android Studio, використовувати MQTT протокол для надсилання запитів на сервер використовуючи IoT пристрої, а також розробляти front-end за допомогою фреймворку React. Врахувавши ці рішення, була розроблена діаграма розгортання.

3 ОПИС АРХІТЕКТУРИ СЕРВЕРНОЇ ЧАСТИНИ

Серверна частина програмної системи написана на мові програмування Java з використанням Spring Boot та Hibernate в IntelliJ IDEA від компанії JetBrains. Проект зібраний за допомогою Maven. Для забезпечення структурованості та легкості в підтримці проекту був використаний підхід MVCS (Model-View-Controller-Service).

4 ПОБУДОВА ДІАГРАМИ ПРЕЦЕДЕНТІВ

На основі аналізу функціоналу майбутньої програмної системи була розроблена діаграма прецедентів, що відображає основні взаємодії користувачів з системою.

5 ПОБУДОВА ER-ДІАГРАМИ

Використовуючи UML діаграму прецедентів та поглиблений аналіз функціоналу системи, була розроблена ER-модель даних, яка відображає основні сутності та їх взаємозв’язки. 
В схемі бази даних присутні такі зв'язки між сутностями:
Користувач та ролі користувача (UserRoles) мають зв'язок багато до багатьох, бо декілька користувачів можуть мати однакові ролі, а також декілька ролей можуть мати однакових користувачів. 
Ролі (Roles) та ролі користувача (UserRoles) мають зв'язок один до багатьох, оскільки одна роль може бути призначена багатьом користувачам через таблицю UserRoles, але кожен запис у таблиці UserRoles пов'язаний з однією роллю. 
Користувачі (Users) та ролі користувача (UserRoles) також мають зв'язок один до багатьох, бо один користувач може мати декілька ролей через таблицю UserRoles, але кожен запис у таблиці UserRoles пов'язаний з одним користувачем. 
Сенсори (Sensors) та рослини (Plants) мають зв'язок один до багатьох, оскільки одна рослина може мати декілька сенсорів, але кожен сенсор пов'язаний лише з однією рослиною. 
Показники сенсорів (Readings) та сенсори (Sensors) мають зв'язок один до багатьох, оскільки один сенсор може мати багато показників, але кожен показник пов'язаний лише з одним сенсором. 
Лампи (Lamps) та сенсори (Sensors) мають зв'язок один до одного, бо кожна лампа пов'язана з одним сенсором, і кожен сенсор може мати одну лампу.

6 СПЕЦИФІКАЦІЯ REST

Для розробки серверної частини була створена REST специфікація(див. додаток А), яка описує доступні ендпоїнти, методи та результати взаємодії з контролером. Специфікація включає ендпоїнти для управління користувачами, сенсорами, зчитуваннями, рослинами та лампами.

7 ПОБУДОВА ДІАГРАМИ КОМПОНЕНТІВ

На основі аналізу та розробки попередніх діаграм була створена детальна діаграма компонент, що відображає основні компоненти системи та їх взаємодію.

ВИСНОВКИ

Розробка серверної частини програмної системи для автоматизованого управління освітленням для вирощування рослин включала використання технологій та підходів, що забезпечують ефективність, гнучкість та легкість в підтримці проекту. Результатом роботи є повноцінна серверна частина з реалізованими ендпоїнтами та чітко визначеними компонентами.

ДОДАТОК А

Специфікація REST

POST /register
POST /login
GET /users
GET /users/{login}
DELETE /users/{login}
GET /users/{login}/roles
POST /users/{login}/roles
DELETE /users/{login}/roles
GET /users/save-to-csv
POST /users/save-from-csv
GET /sensors
POST /sensors
DELETE /sensors
GET /sensors/{plantId}
POST /readings
GET /readings/{sensorsId}
GET /readings/warnings/{plantId}
GET /plants
POST /plants
PATCH /plants
DELETE /plants/{plantId}
GET /lamps
POST /lamps
DELETE /lamps
PATCH /lamps
GET /lamps/{sensorId}